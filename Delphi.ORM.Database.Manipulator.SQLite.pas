unit Delphi.ORM.Database.Manipulator.SQLite;

interface

uses Delphi.ORM.Mapper, Delphi.ORM.Database.Metadata.Manipulator, Delphi.ORM.Database.Metadata;

type
  TManipulatorSQLite = class(TMetadataManipulator, IMetadataManipulator)
  private
    procedure CreateIndex(const Index: TIndex);
    procedure LoadSchema(const Schema: TDatabaseSchema);
  public
    function GetAutoGeneratedValue(const DefaultConstraint: TDefaultConstraint): String; override;
    function GetFieldType(const Field: TField): String; override;
    function GetSpecialFieldType(const Field: TField): String; override;
  end;

implementation

uses System.SysUtils, Delphi.ORM.Attributes;

const
  FIELD_TYPE_MAPPING: array[TTypeKind] of String = ('', 'int', '', 'tinyint', 'numeric', '', '', '', '', 'char', '', '', '', '', '', '', 'bigint', '', 'varchar', '', '', '', '');
  SPECIAL_TYPE_MAPPING: array[TDatabaseSpecialType] of String = ('', 'date', 'datetime', 'time', 'text', 'unique', 'bit');

{ TManipulatorSQLite }

procedure TManipulatorSQLite.CreateIndex(const Index: TIndex);
begin

end;

function TManipulatorSQLite.GetAutoGeneratedValue(const DefaultConstraint: TDefaultConstraint): String;
begin

end;

function TManipulatorSQLite.GetFieldType(const Field: TField): String;
begin
  Result := FIELD_TYPE_MAPPING[Field.FieldType.TypeKind];
end;

function TManipulatorSQLite.GetSpecialFieldType(const Field: TField): String;
begin
  Result := SPECIAL_TYPE_MAPPING[Field.SpecialType];
end;

procedure TManipulatorSQLite.LoadSchema(const Schema: TDatabaseSchema);
begin

end;

end.

