unit Persisto.Attributes;

interface

uses System.Rtti;

type
  TAutoGeneratedType = (agtNotDefined, agtCurrentDate, agtCurrentTime, agtCurrentDateTime, agtNewUniqueIdentifier, agtNewGuid, agtSequence, agtFixedValue);
  TDatabaseSpecialType = (stNotDefined, stDate, stDateTime, stTime, stText, stUniqueIdentifier, stBoolean);

  EntityAttribute = class(TCustomAttribute);

  TCustomNameAttribute = class(TCustomAttribute)
  private
    FName: String;
  public
    constructor Create(const Name: String);

    property Name: String read FName;
  end;

  FieldNameAttribute = class(TCustomNameAttribute);
  ForeignKeyNameAttribute = class(TCustomNameAttribute);
  ManyValueAssociationLinkNameAttribute = class(TCustomNameAttribute);
  PrimaryKeyAttribute = class(TCustomNameAttribute);
  SingleTableInheritanceAttribute = class(TCustomAttribute);
  TableNameAttribute = class(TCustomNameAttribute);

  IndexAttribute = class(TCustomNameAttribute)
  private
    FFields: String;
  public
    constructor Create(const Name, Fields: String);

    property Fields: String read FFields;
  end;

  UniqueKeyAttribute = class(IndexAttribute);

  FieldInfoAttribute = class(TCustomAttribute)
  private
    FPrecision: Word;
    FScale: Word;
    FSize: Word;
    FSpecialType: TDatabaseSpecialType;

    constructor Create(const SpecialType: TDatabaseSpecialType; const Size, Scale: Word); overload;
  public
    constructor Create(const Precision, Scale: Word); overload;
    constructor Create(const Size: Word); overload;
    constructor Create(const SpecialType: TDatabaseSpecialType); overload;

    property Precision: Word read FPrecision;
    property Scale: Word read FScale;
    property Size: Word read FSize;
    property SpecialType: TDatabaseSpecialType read FSpecialType;
  end;

  UniqueIdentifierAttribute = class(FieldInfoAttribute)
  public
    constructor Create;
  end;

  TextAttribute = class(FieldInfoAttribute)
  public
    constructor Create;
  end;

  SizeAttribute = class(FieldInfoAttribute)
  public
    constructor Create(const Size: Word);
  end;

  PrecisionAttribute = class(FieldInfoAttribute)
  public
    constructor Create(const Precision, Scale: Word);
  end;

  RequiredAttribute = class(TCustomAttribute)
  end;

  TAutoGeneratedAttribute = class(TCustomAttribute)
  private
    FType: TAutoGeneratedType;

    constructor Create(const &Type: TAutoGeneratedType);
  public
    property &Type: TAutoGeneratedType read FType write FType;
  end;

  CurrentDateAttribute = class(TAutoGeneratedAttribute)
  public
    constructor Create;
  end;

  CurrentTimeAttribute = class(TAutoGeneratedAttribute)
  public
    constructor Create;
  end;

  CurrentDateTimeAttribute = class(TAutoGeneratedAttribute)
  public
    constructor Create;
  end;

  FixedValueAttribute = class(TAutoGeneratedAttribute)
  private
    FValue: String;
  public
    constructor Create(const Value: String);

    property Value: String read FValue write FValue;
  end;

  NewUniqueIdentifierAttribute = class(TAutoGeneratedAttribute)
  public
    constructor Create;
  end;

  NewGuidAttribute = class(TAutoGeneratedAttribute)
  public
    constructor Create;
  end;

  SequenceAttribute = class(TAutoGeneratedAttribute)
  private
    FName: String;
  public
    constructor Create(const Name: String);

    property Name: String read FName write FName;
  end;

implementation

{ TCustomNameAttribute }

constructor TCustomNameAttribute.Create(const Name: String);
begin
  inherited Create;

  FName := Name;
end;

{ IndexAttribute }

constructor IndexAttribute.Create(const Name, Fields: String);
begin
  inherited Create(Name);

  FFields := Fields;
end;

{ FieldInfoAttribute }

constructor FieldInfoAttribute.Create(const Precision, Scale: Word);
begin
  Create(stNotDefined, Precision, Scale);
end;

constructor FieldInfoAttribute.Create(const Size: Word);
begin
  Create(stNotDefined, Size, 0);
end;

constructor FieldInfoAttribute.Create(const SpecialType: TDatabaseSpecialType);
begin
  Create(SpecialType, 0, 0);
end;

constructor FieldInfoAttribute.Create(const SpecialType: TDatabaseSpecialType; const Size, Scale: Word);
begin
  inherited Create;

  FScale := Scale;
  FSize := Size;
  FSpecialType := SpecialType;
end;

{ UniqueIdentifierAttribute }

constructor UniqueIdentifierAttribute.Create;
begin
  inherited Create(stUniqueIdentifier, 0, 0);
end;

{ SizeAttribute }

constructor SizeAttribute.Create(const Size: Word);
begin
  inherited Create(Size);
end;

{ PrecisionAttribute }

constructor PrecisionAttribute.Create(const Precision, Scale: Word);
begin
  inherited Create(Precision, Scale);
end;

{ TextAttribute }

constructor TextAttribute.Create;
begin
  inherited Create(stText, 0, 0);
end;

{ TAutoGeneratedAttribute }

constructor TAutoGeneratedAttribute.Create(const &Type: TAutoGeneratedType);
begin
  inherited Create;

  FType := &Type;
end;

{ CurrentDateAttribute }

constructor CurrentDateAttribute.Create;
begin
  inherited Create(agtCurrentDate);
end;

{ CurrentTimeAttribute }

constructor CurrentTimeAttribute.Create;
begin
  inherited Create(agtCurrentTime);
end;

{ CurrentDateTimeAttribute }

constructor CurrentDateTimeAttribute.Create;
begin
  inherited Create(agtCurrentDateTime);
end;

{ NewUniqueIdentifierAttribute }

constructor NewUniqueIdentifierAttribute.Create;
begin
  inherited Create(agtNewUniqueIdentifier);
end;

{ NewGuidAttribute }

constructor NewGuidAttribute.Create;
begin
  inherited Create(agtNewGuid);
end;

{ SequenceAttribute }

constructor SequenceAttribute.Create(const Name: String);
begin
  inherited Create(agtSequence);

  FName := Name;
end;

{ FixedValueAttribute }

constructor FixedValueAttribute.Create(const Value: String);
begin
  inherited Create(agtFixedValue);

  FValue := Value;
end;

end.

