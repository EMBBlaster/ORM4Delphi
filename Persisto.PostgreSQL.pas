unit Persisto.PostgreSQL;

interface

uses Persisto, Persisto.Mapping;

type
  TDatabaseManipulatorPostgreSQL = class(TDatabaseManipulator, IDatabaseManipulator)
  private
    function CreateDefaultConstraint(const Field: TField): String;
    function CreateSequence(const Sequence: TSequence): String;
    function GetFieldType(const Field: TField): String;
    function GetSchemaTablesScripts: TArray<String>;
    function RenameField(const Current, Destiny: TField): String;
  end;

implementation

uses System.SysUtils;

const
  AUTO_GENERATED_VALUE_MAPPING: array[TAutoGeneratedType] of String = ('', 'date()', 'time()', 'datetime(''now'', ''localtime'')', 'uuid()', 'uuid()', '', '');
  SPECIAL_TYPE_MAPPING: array[TDatabaseSpecialType] of String = ('', 'date', 'timestamp', 'time', 'text', 'varchar(38)', 'boolean');

{ TDatabaseManipulatorPostgreSQL }

function TDatabaseManipulatorPostgreSQL.CreateDefaultConstraint(const Field: TField): String;
begin

end;

function TDatabaseManipulatorPostgreSQL.CreateSequence(const Sequence: TSequence): String;
begin

end;

function TDatabaseManipulatorPostgreSQL.GetFieldType(const Field: TField): String;
begin
  case Field.FieldType.TypeKind of
    tkInteger: Result := 'int';
    tkEnumeration: Result := 'smallint';
    tkFloat: Result := 'numeric';
    tkChar,
    tkWChar: Result := 'char';
    tkInt64: Result := 'bigint';
    tkString,
    tkLString,
    tkWString,
    tkUString: Result := 'varchar';
    else Result := EmptyStr;
  end;
end;

function TDatabaseManipulatorPostgreSQL.GetSchemaTablesScripts: TArray<String>;
begin
  Result := [
      'create temp view PersistoDatabaseTable as (select table_name Name from information_schema.tables)',
      'create temp view PersistoDatabaseTableField as (select table_name IdTable, column_name Name from information_schema.columns)'
    ];
end;

function TDatabaseManipulatorPostgreSQL.RenameField(const Current, Destiny: TField): String;
begin

end;

end.

