unit Persisto.SQLite;

interface

uses Persisto;

type
  TManipulatorSQLite = class(TMetadataManipulator, IMetadataManipulator)
  private
    procedure CreateForeignKey(const ForeignKey: TForeignKey);
    procedure CreateIndex(const Index: TIndex);
    procedure LoadSchema(const Schema: TDatabaseSchema);
  public
    constructor Create(const Connection: IDatabaseConnection);

    function GetAutoGeneratedValue(const DefaultConstraint: TDefaultConstraint): String; override;
    function GetFieldType(const Field: TField): String; override;
    function GetSpecialFieldType(const Field: TField): String; override;
  end;

implementation

uses System.SysUtils, Persisto.Mapping;

const
  AUTO_GENERATED_VALUE_MAPPING: array[TAutoGeneratedType] of String = ('', 'CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'UUID()', 'GUID()', '', '');
  FIELD_TYPE_MAPPING: array[TTypeKind] of String = ('', 'int', '', 'tinyint', 'numeric', '', '', '', '', 'char', '', '', '', '', '', '', 'bigint', '', 'varchar', '', '', '', '');
  SPECIAL_TYPE_MAPPING: array[TDatabaseSpecialType] of String = ('', 'date', 'datetime', 'time', 'text', 'unique', 'bit');

{ TManipulatorSQLite }

constructor TManipulatorSQLite.Create(const Connection: IDatabaseConnection);
begin
  inherited;

//  Connection.ExecuteDirect('PRAGMA foreign_keys = ON');
end;

procedure TManipulatorSQLite.CreateForeignKey(const ForeignKey: TForeignKey);
begin

end;

procedure TManipulatorSQLite.CreateIndex(const Index: TIndex);
begin

end;

function TManipulatorSQLite.GetAutoGeneratedValue(const DefaultConstraint: TDefaultConstraint): String;
begin
  case DefaultConstraint.AutoGeneratedType of
    agtFixedValue: Result := DefaultConstraint.FixedValue;
    agtSequence: raise Exception.Create('Not implemented!');
    else Result := AUTO_GENERATED_VALUE_MAPPING[DefaultConstraint.AutoGeneratedType];
  end;
end;

function TManipulatorSQLite.GetFieldType(const Field: TField): String;
begin
  Result := FIELD_TYPE_MAPPING[Field.FieldType.TypeKind];
end;

function TManipulatorSQLite.GetSpecialFieldType(const Field: TField): String;
begin
  Result := SPECIAL_TYPE_MAPPING[Field.SpecialType];
end;

procedure TManipulatorSQLite.LoadSchema(const Schema: TDatabaseSchema);
begin

end;

end.

