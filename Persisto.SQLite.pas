unit Persisto.SQLite;

interface

uses Persisto, Persisto.Mapping;

type
  TDatabaseManipulatorSQLite = class(TDatabaseManipulator, IDatabaseManipulator)
  private
    function CreateSequence(const Sequence: TSequence): String;
    function DropSequence(const Sequence: TDatabaseSequence): String;
    function GetDefaultValue(const DefaultConstraint: TDefaultConstraint): String;
    function GetFieldType(const Field: TField): String;
    function GetSchemaTablesScripts: TArray<String>;
    function GetSpecialFieldType(const Field: TField): String;
  end;

implementation

uses System.SysUtils;

{ TDatabaseManipulatorSQLite }

function TDatabaseManipulatorSQLite.CreateSequence(const Sequence: TSequence): String;
begin
  Result := Format('insert into sqlite_sequence (name, seq) values (''%s'', 0)', [Sequence.Name]);
end;

function TDatabaseManipulatorSQLite.DropSequence(const Sequence: TDatabaseSequence): String;
begin
  Result := Format('delete from sqlite_sequence where name = ''%s''', [Sequence.Name]);
end;

function TDatabaseManipulatorSQLite.GetDefaultValue(const DefaultConstraint: TDefaultConstraint): String;
const
  AUTO_GENERATED_VALUE_MAPPING: array [TAutoGeneratedType] of String = ('', 'date()', 'time()', 'datetime(''now'', ''localtime'')', 'uuid()', 'newguid()', '', '');

begin
  case DefaultConstraint.AutoGeneratedType of
    agtFixedValue:
      Result := DefaultConstraint.FixedValue;
    agtSequence:
      Result := Format('next_value_for(''%s'')', [DefaultConstraint.Sequence.Name]);
  else
    Result := AUTO_GENERATED_VALUE_MAPPING[DefaultConstraint.AutoGeneratedType];
  end;
end;

function TDatabaseManipulatorSQLite.GetFieldType(const Field: TField): String;
begin
  case Field.FieldType.TypeKind of
    tkInteger:
      Result := 'int';
    tkEnumeration:
      Result := 'smallint';
    tkFloat:
      Result := 'numeric';
    tkChar, tkWChar:
      Result := 'char';
    tkInt64:
      Result := 'bigint';
    tkString, tkLString, tkWString, tkUString:
      Result := 'varchar';
  else
    Result := EmptyStr;
  end;
end;

function TDatabaseManipulatorSQLite.GetSchemaTablesScripts: TArray<String>;
const
  DEFAULT_CONSTRAINT_SQL =
    'select null Id, null Name, null Value';

  FOREING_KEY_SQL =
    'select null Id, null Name, null IdTable, null IdReferenceTable';

  FOREING_KEY_COLUMS_SQL =
    'select null Id, null Name, null IdForeignKey';

  SEQUENCES_SQL =
    'select Name ' +
      'from sqlite_sequence';

  TABLE_SQL =
    'select null Id, null Name';

  COLUMNS_SQL =
    'select null Id, null IdDefaultConstraint, null IdTable, null FieldType, null Name, null Required, null Scale, null Size, null SpecialType';

  function CreateTable(const Name: String; const Fields: TArray<String>; const SQL: String): TArray<String>;

    function GetFieldList: String;
    begin
      Result := EmptyStr;

      for var Field in Fields do
        Result := Result + Format('%s,', [Field]);

      Result := Result.Substring(0, Pred(Result.Length));
    end;

    function GetCreateFieldList: String;
    begin
      Result := EmptyStr;

      for var Field in Fields do
        Result := Result + Format('%s varchar(250),', [Field]);

      Result := Result.Substring(0, Pred(Result.Length));
    end;

  begin
    Result := [Format('create table if not exists PersistoDatabase%s (%s)', [Name, GetCreateFieldList]), Format('delete from PersistoDatabase%s', [Name]),
      Format('insert into PersistoDatabase%s (%s) %s', [Name, GetFieldList, SQL])];
  end;

const
  FOREIGN_KEY_ID = '''FK_'' || T.name || ''_'' || FK."table" || ''_'' || FK."from"';

begin
  Result := ['create table if not exists PersistoDatabaseSequenceWorkArround (sequence integer primary key autoincrement)']
    + CreateTable('DefaultConstraint', ['Id', 'Name', 'Value'], DEFAULT_CONSTRAINT_SQL)
    + CreateTable('ForeignKey', ['Id', 'Name', 'IdTable', 'IdReferenceTable'], FOREING_KEY_SQL)
    + CreateTable('ForeignKeyField', ['Id', 'Name', 'IdForeignKey'], FOREING_KEY_COLUMS_SQL)
    + CreateTable('Sequence', ['Id', 'Name'], SEQUENCES_SQL)
    + CreateTable('Table', ['Id', 'Name'], TABLE_SQL)
    + CreateTable('TableField', ['Id', 'IdDefaultConstraint', 'IdTable', 'FieldType', 'Name', 'Required', 'Scale', 'Size', 'SpecialType'], COLUMNS_SQL);
end;

function TDatabaseManipulatorSQLite.GetSpecialFieldType(const Field: TField): String;
const
  SPECIAL_TYPE_MAPPING: array [TDatabaseSpecialType] of String = ('', 'date', 'datetime', 'time', 'text', 'varchar(38)', 'boolean');

begin
  Result := SPECIAL_TYPE_MAPPING[Field.SpecialType];
end;

end.

