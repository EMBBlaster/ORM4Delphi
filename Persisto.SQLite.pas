unit Persisto.SQLite;

interface

uses Persisto, Persisto.Mapping;

type
  TDatabaseManipulatorSQLite = class(TDatabaseManipulator, IDatabaseManipulator)
  private
    function CreateDefaultConstraint(const Field: TField): String;
    function CreateForeignKey(const ForeignKey: TForeignKey): String;
    function CreateIndex(const Index: TIndex): String;
    function CreateSequence(const Sequence: TSequence): String;
    function GetDefaultValue(const DefaultConstraint: TDefaultConstraint): String;
    function GetFieldType(const Field: TField): String;
    function GetSchemaTablesScripts: TArray<String>;
    function GetSpecialFieldType(const Field: TField): String;
    function RenameField(const Current, Destiny: TField): String;
  end;

implementation

uses System.SysUtils;

{ TDatabaseManipulatorSQLite }

function TDatabaseManipulatorSQLite.CreateDefaultConstraint(const Field: TField): String;
begin

end;

function TDatabaseManipulatorSQLite.CreateForeignKey(const ForeignKey: TForeignKey): String;
begin

end;

function TDatabaseManipulatorSQLite.CreateIndex(const Index: TIndex): String;
begin

end;

function TDatabaseManipulatorSQLite.CreateSequence(const Sequence: TSequence): String;
begin

end;

function TDatabaseManipulatorSQLite.GetDefaultValue(const DefaultConstraint: TDefaultConstraint): String;
const
  AUTO_GENERATED_VALUE_MAPPING: array[TAutoGeneratedType] of String = ('', 'date()', 'time()', 'datetime(''now'', ''localtime'')', 'uuid()', 'uuid()', '', '');

begin
  case DefaultConstraint.AutoGeneratedType of
    agtFixedValue: Result := DefaultConstraint.FixedValue;
    agtSequence: Result := '0';
    else Result := AUTO_GENERATED_VALUE_MAPPING[DefaultConstraint.AutoGeneratedType];
  end;
end;

function TDatabaseManipulatorSQLite.GetFieldType(const Field: TField): String;
begin
  case Field.FieldType.TypeKind of
    tkInteger: Result := 'int';
    tkEnumeration: Result := 'smallint';
    tkFloat: Result := 'numeric';
    tkChar,
    tkWChar: Result := 'char';
    tkInt64: Result := 'bigint';
    tkString,
    tkLString,
    tkWString,
    tkUString: Result := 'varchar';
    else Result := EmptyStr;
  end;
end;

function TDatabaseManipulatorSQLite.GetSchemaTablesScripts: TArray<String>;
begin
  Result := [
    'create table if not exists PersistoDatabaseTable (name varchar(250))',
    'create table if not exists PersistoDatabaseTableField (name varchar(250), IdTable varchar(250))',
    'delete from PersistoDatabaseTable',
    'delete from PersistoDatabaseTableField',
    'insert into PersistoDatabaseTable (name) select name from sqlite_master where type = ''table''',
    'insert into PersistoDatabaseTableField (name, IdTable) select C.name, T.name from sqlite_master T, pragma_table_info(T.name) C where T.type = ''table'''
    ];
end;

function TDatabaseManipulatorSQLite.GetSpecialFieldType(const Field: TField): String;
const
  SPECIAL_TYPE_MAPPING: array[TDatabaseSpecialType] of String = ('', 'date', 'datetime', 'time', 'text', 'varchar(38)', 'boolean');

begin
  Result := SPECIAL_TYPE_MAPPING[Field.SpecialType];
end;

function TDatabaseManipulatorSQLite.RenameField(const Current, Destiny: TField): String;
begin

end;

end.

