unit Persisto.Mapper.Test;

interface

uses System.Rtti, DUnitX.TestFramework, Translucent.Intf, Persisto, Persisto.Mapping;

type
  [TestFixture]
  TMapperTest = class
  private
    FContext: TRttiContext;
    FLazyLoader: IMock<ILazyLoader>;
    FMapper: TMapper;
  public
    [SetupFixture]
    procedure SetupFixture;
    [Setup]
    procedure Setup;
    [TearDown]
    procedure TearDown;
    [Test]
    procedure WhenCallLoadAllMustLoadAllClassesWithTheEntityAttribute;
    [Test]
    procedure WhenTryToFindATableMustReturnTheTableOfTheClass;
    [Test]
    procedure WhenLoadATableMustLoadAllFieldsToo;
    [Test]
    procedure WhenTheFieldsAreLoadedMustFillTheNameWithTheNameOfPropertyOfTheClass;
    [Test]
    procedure WhenLoadAClassMustKeepTheOrderingOfTablesToTheFindTableContinueToWorking;
    [Test]
    procedure WhenLoadAFieldMustFillThePropertyWithThePropertyInfo;
    [Test]
    procedure WhenAClassDoesNotHaveThePrimaryKeyAttributeAndHasAnIdFieldThisWillBeThePrimaryKey;
    [Test]
    procedure WhenTheClassHaveThePrimaryKeyAttributeThePrimaryKeyWillBeTheFieldFilled;
    [Test]
    procedure TheFieldInPrimaryKeyMustBeMarkedWithInPrimaryKey;
    [Test]
    procedure TheDatabaseNameOfATableMustBeTheNameOfClassRemovingTheFirstCharOfTheClassName;
    [Test]
    procedure WhenTheClassHaveTheTableNameAttributeTheDatabaseNameMustBeLikeTheNameInAttribute;
    [Test]
    procedure OnlyPublishedFieldMutsBeLoadedInTheTable;
    [Test]
    procedure WhenTheFieldHaveTheFieldNameAttributeMustLoadThisNameInTheDatabaseName;
    [Test]
    procedure EveryPropertyThatIsAnObjectMustCreateAForeignKeyInTheListOfTheTable;
    [Test]
    procedure WhenTheForeignKeyIsCreatesMustLoadTheParentTable;
    [Test]
    procedure TheParentTableMustBeTheTableLinkedToTheField;
    [Test]
    procedure WhenTheFieldIsAClassMustFillTheDatabaseNameWithIdPlusPropertyName;
    [Test]
    procedure TheFieldOfAForeignKeyMustBeFilledWithTheFieldOfTheClassThatIsAForeignKey;
    [Test]
    procedure TheLoadingOfForeingKeyMustBeAfterAllTablesAreLoadedToTheFindTableWorksPropertily;
    [Test]
    procedure WhenMapAForeignKeyIsToAClassWithoutAPrimaryKeyMustRaiseAnError;
    [Test]
    procedure WhenCallLoadAllMoreThemOneTimeCantRaiseAnError;
    [Test]
    procedure TheClassWithTheSingleTableInheritanceAttributeCantBeMappedInTheTableList;
    [Test]
    procedure WhenAClassIsInheritedFromAClassWithTheSingleTableInheritanceAttributeMustLoadAllFieldsInTheTable;
    [Test]
    procedure WhenAClassIsInheritedFromAClassWithTheSingleTableInheritanceAttributeCantGenerateAnyForeignKey;
    [Test]
    procedure WhenTheClassIsInheritedFromANormalClassCantLoadFieldsFormTheBaseClass;
    [Test]
    procedure WhenTheClassIsInheritedFromANormalClassMustCreateAForeignKeyForTheBaseClass;
    [Test]
    procedure WhenTheClassIsInheritedFromTObjectCantCreateAForeignKeyForThatClass;
    [Test]
    procedure WhenAClassIsInheritedFromAClassWithTheSingleTableInheritanceAttributeThePrimaryKeyMustBeLoadedFromTheTopClass;
    [Test]
    procedure WhenTheClassIsInheritedMustLoadThePrimaryKeyFromBaseClass;
    [Test]
    procedure WhenTheClassIsInheritedMustShareTheSamePrimaryKeyFromTheBaseClass;
    [Test]
    procedure WhenTheForeignKeyIsAClassAliasMustLoadTheForeignClassAndLinkToForeignKey;
    [Test]
    procedure WhenLoadMoreThenOneTimeTheSameClassCantRaiseAnError;
    [Test]
    procedure WhenAPropertyIsAnArrayMustLoadAManyValueLink;
    [Test]
    procedure TheTableOfManyValueAssociationMustBeTheChildTableOfThisLink;
    [Test]
    procedure TheFieldLinkingTheParentAndChildOfManyValueAssociationMustBeLoaded;
    [Test]
    procedure WhenTheChildClassIsDeclaredBeforeTheParentClassTheLinkBetweenOfTablesMustBeCreated;
    [Test]
    procedure TheManyValueAssociationMustLoadTheFieldThatGeneratedTheValue;
    [Test]
    procedure WhenAFieldIsWithTheAutoGeneratedAttributeMustLoadAsTrueThePropertyInField;
    [TestCase('AnsiChar', 'AnsiChar')]
    [TestCase('AnsiString', 'AnsiString')]
    [TestCase('Char', 'Char')]
    [TestCase('Enumerator', 'Enumerator')]
    [TestCase('Float', 'Float')]
    [TestCase('GUID', 'GUID')]
    [TestCase('Integer', 'Integer')]
    [TestCase('Int64', 'Int64')]
    [TestCase('String', 'String')]
    procedure WhenSetValueFieldMustLoadThePropertyOfTheClassAsWithTheValueExpected(FieldName: String);
    [Test]
    procedure WhenTheFieldValueIsNullMustLoadTheFieldWithTheEmptyValue;
    [Test]
    procedure WhenAFieldIsAForeignKeyThePropertyIsForeignKeyMustReturnTrue;
    [Test]
    procedure WhenAFieldIsAManyValueAssociationThePropertyIsManyValueAssociationReturnTrue;
    [Test]
    procedure WhenAFieldIsAForeignKeyThePropertyIsJoinLinkMustReturnTrue;
    [Test]
    procedure WhenAFieldIsAManyValueAssociationThePropertyIsJoinLinkReturnTrue;
    [Test]
    procedure TheFunctionGetValueFromFieldMustReturnTheValueOfThePropertyOfTheField;
    [TestCase('AnsiChar', 'AnsiChar')]
    [TestCase('AnsiString', 'AnsiString')]
    [TestCase('Char', 'Char')]
    [TestCase('Class', 'Class')]
    [TestCase('Empty Class', 'EmptyClass')]
    [TestCase('Enumerator', 'Enumerator')]
    [TestCase('Float', 'Float')]
    [TestCase('Date', 'Date')]
    [TestCase('DateTime', 'DateTime')]
    [TestCase('GUID', 'GUID')]
    [TestCase('Integer', 'Integer')]
    [TestCase('Int64', 'Int64')]
    [TestCase('String', 'String')]
    [TestCase('Time', 'Time')]
    procedure WhenGetTheValueOfTheFieldAsStringMustBuildTheStringAsExpected(FieldName: String);
    [Test]
    procedure WhenTheFieldIsMappedMustLoadTheReferenceToTheTableOfTheField;
    [Test]
    procedure WhenAClassWithManyValueAssociationHasAChildClassWithMoreThenOneForeignKeyToParentClassMustLoadTheForeignKeyWithTheSameNameOfTheParentTable;
    [Test]
    procedure WhenTheLinkBetweenTheManyValueAssociationAndTheChildTableForeignKeyDontExistsMustRaiseAnError;
    [Test]
    procedure TheNameOfManyValueAssociationLinkCanBeDefinedByTheAttributeToTheLinkHappen;
    [Test]
    procedure WhenATableIsLoadedMustFillTheMapperPropertyOfTheTable;
    [TestCase('AnsiChar', 'AnsiChar,''C''')]
    [TestCase('AnsiString', 'AnsiString,''AnsiString''')]
    [TestCase('Char', 'Char,''C''')]
    [TestCase('Class', 'Class,1234')]
    [TestCase('Enumerator', 'Enumerator,1')]
    [TestCase('Empty class', 'EmptyClass,null')]
    [TestCase('Float', 'Float,1234.456')]
    [TestCase('Date', 'Date,''2020-01-31''')]
    [TestCase('DateTime', 'DateTime,''2020-01-31T12:34:56.000''')]
    [TestCase('GUID', 'GUID,''{BD2BBA84-C691-4C5E-ABD3-4F32937C53F8}''')]
    [TestCase('Integer', 'Integer,1234')]
    [TestCase('Int64', 'Int64,1234')]
    [TestCase('String', 'String,''String''')]
    [TestCase('Time', 'Time,''12:34:56''')]
    procedure TheConversionOfTheTValueMustBeLikeExpected(TypeToConvert, ValueToCompare: String);
    [Test]
    procedure WhenThePropertyIsNullableMustMarkTheFieldAsNotRequired;
    [Test]
    procedure ThePrimaryKeyCantBeNullable;
    [Test]
    procedure WhenGetValueOfAndFieldNullableMustReturnEmptyIfHasNoValue;
    [Test]
    procedure WhenTheNullablePropertyIsLoadedMustReturnTheFilled;
    [Test]
    procedure WhenTheNullablePropertyIsFilledWithTheNullValueMustMarkAsNullTheValue;
    [Test]
    procedure WhenTheNullablePropertyIsFilledWithAValueMustLoadTheValue;
    [Test]
    procedure WhenThePropertyIsLazyMustFillWithTrueTheIsLazyPropertyInTheField;
    [Test]
    procedure WhenThePropertyIsLazyMustCreateTheForeignKeyToThisProperty;
    [Test]
    procedure TheFieldThatGenerateAForignKeyMustLoadThisInfoInTheField;
    [Test]
    procedure WhenTheFieldIsAForeignKeyMustAppendTheIdInTheDatabaseNameOfTheField;
    [Test]
    procedure TheFieldsMustBeOrderedByPriorityFirstPrimaryKeyThenRegularFieldsThenForeignKeysThenManyValueAssociations;
    [Test]
    procedure WhenTheLazyPropertyIsLoadedMustReturnTheInternalValue;
    [Test]
    procedure WhenGetTheStringValueOfANullableTypeAndTheValueIsNullMustReturnTheNullStringValue;
    [Test]
    procedure WhenGetTheStringValueOfANullableTypeAndTheValueIsFilledMustReturnTheValue;
    [Test]
    procedure WhenGetTheStringValueOfLazyPropertyMustReturnThePrimaryKeyValueOfLoadedValue;
    [Test]
    procedure WhenLoadTheTableMustLoadTheNameOfTheTableWithTheNameOfTheClassWithoutTheTChar;
    [Test]
    procedure WhenLoadTheFieldOfATableMustLoadTheNameOfTheFieldWithThePropertyName;
    [Test]
    procedure WhenLoadAFieldMustLoadTheFieldTypeWithTheTypeOfTheProperty;
    [Test]
    procedure WhenLoadANullableFieldMustLoadTheFieldTypeWithTheInternalNullableType;
    [Test]
    procedure IfTheFindTableNotFoundTheClassMustRaiseAnError;
    [Test]
    procedure WhenTheClassHasAForeignKeyAndTheKeyTableIsntLoadedMustLoadTheTableFirstAndNotRaiseAnError;
    [Test]
    procedure TheFindTableWithTypeInfoMustReturnTheTableHasExpected;
    [Test]
    procedure TheFindTableWithTypeInfoMustRaiseAnErrorIfNotFindTheTable;
    [Test]
    procedure WhenTheClassHasASimpleInheritenceMustLoadTheBaseTableProperty;
    [Test]
    procedure WhenTheClassInheritsFromObjectCantRaiseAnyError;
    [Test]
    procedure IfTheBaseClassHasTheSingleTableAttributeCantLoadBaseTableProperty;
    [Test]
    procedure TheFindFieldFunctionMustReturnTrueIfTheFieldExistsInTheTable;
    [Test]
    procedure TheFindFieldFunctionMustReturnTheFieldDefinitionWhenFindTheField;
    [Test]
    procedure TheForeignKeyCreatedForTheInheritanceMustBeMarkedHasInheritanceLink;
    [Test]
    procedure WhenAForeignKeyFieldHasTheFieldNameAttributeThisMustBeTheDatabaseNameField;
    [Test]
    procedure WhenCallGetCacheKeyMustBuildTheValueOfTheCacheKeyWithThePrimaryKeyValueFromTheClass;
    [Test]
    procedure WhenTheClassDontHaveAPrimaryKeyMustLoadTheCacheKeyWithoutThePrimaryKeyValue;
    [Test]
    procedure IfTheValueVariantIsNullValueMustReturnAEmptyTValue;
    [Test]
    procedure IfTheFieldIsAnEnumeratorMustReturnTheOrdinalValueFromVariant;
    [Test]
    procedure IfTheVariantValueIsGUIDValueMustConvertToTValueAsExpected;
    [Test]
    procedure TheAnotherVariantValuesMustJustConvertToTValue;
    [Test]
    procedure WhenCallGetCacheValueWithVariantMustBuildTheKeyAsExpected;
    [Test]
    procedure WhenCallGetCacheValueWithVariantAndTheTableDontHavePrimaryKeyMustLoadTheKeyAsExpected;
    [Test]
    procedure TheGetCacheFunctionWithAnInstanceMustBuildTheKeyWithTheClassOfTheInstanceNotFromTable;
    [Test]
    procedure IfTheChildTableOfAManyValueAssociationHasntPrimaryKeyMustRaiseAnError;
    [Test]
    procedure ThenMakeAForeignKeyToASingleTableInheritanceMustRaiseAnError;
    [Test]
    procedure MappingAEntityWithForeignKeyToASingleInheritedClassCantRaiseError;
    [Test]
    procedure WhenLoadATableWithSingleInheritenceMustLoadTheFieldsOfAllLevels;
    [Test]
    procedure WhenTheTableIsInheritedMustLoadAllManyValueAssociationOfTheClass;
    [Test]
    procedure WhenTheFieldHasTheNoUpdateAttributeTheFieldMustBeMarkedAsReadOnly;
    [Test]
    procedure WhenMappingALazyArrayClassCantRaiseAnyError;
    [Test]
    procedure WhenMappingALazyArrayClassMustLoadTheFieldWithTheExpectedPropertyValueFilled;
    [Test]
    procedure WhenGetPropertyValueMustReturnTheValueOfTheProperty;
    [Test]
    procedure TheForeignKeyDatabaseNameMustBeTheConcatenationOfTheTablesAndFieldInfo;
    [Test]
    procedure IfTheForeignKeyHasTheNameAttributeTheDatabaseNameMustBeTheAttributeValue;
    [Test]
    procedure WhenTheClassHasTheIndexAnnotationMustLoadTheIndexInfoOfTheTable;
    [Test]
    procedure WhenLoadTheIndexMustLoadTheNameOfTheIndexHasExpected;
    [Test]
    procedure WhenUseTheUniqueIndexAttributeMustMarkTheIndexAsUnique;
    [Test]
    procedure MustLoadTheFieldsInTheIndexHasExpected;
    [Test]
    procedure IfTheFieldInIndexNotExistsInTheTableMustRaiseAnError;
    [Test]
    procedure WhenTheFieldHasFieldInfoAttributeWithSpecialTypeFilledMustLoadThisInfoInTheField;
    [Test]
    procedure WhenTheFieldHasFieldInfoAttributeWithSizeFilledMustLoadThisInfoInTheField;
    [Test]
    procedure WhenTheFieldHasFieldInfoAttributeWithPrecisionAndScaleFilledMustLoadThisInfoInTheField;
    [Test]
    procedure TheFieldTablePropertyMustReturnTheFieldIfFoundIt;
    [Test]
    procedure WhenTheFieldIsOfDateTypeMustLoadTheSpecialTypeWithDate;
    [Test]
    procedure WhenTheFieldIsOfDateTimeTypeMustLoadTheSpecialTypeWithDateTime;
    [Test]
    procedure WhenTheFieldIsOfTimeTypeMustLoadTheSpecialTypeWithTime;
    [Test]
    procedure IfTheFieldIsLazyAndHasAnValueLoadedMustReturnTrueInTheHasValueFunction;
    [Test]
    procedure IfTheFieldIsAClassMustReturnTrueInTheHasValueFunctionIfTheClassValueIsLoaded;
    [Test]
    procedure IfTheFieldIsAClassMustReturnFalseInTheHasValueFunctionIfTheClassValueIsNotLoaded;
    [Test]
    procedure IfTheFieldIsNullableMustReturnFalseInTheHasValueFunctionIfTheValueNotLoaded;
    [Test]
    procedure ThePrimaryKeyReferenceInAnInheritedClassMustHaveSameTypeOfTheKeyOfTheBaseType;
    [Test]
    procedure WhenTheFieldIsBooleanTypeMustLoadTheSpecialTypeWithBoolean;
    [Test]
    procedure WhenTheFieldIsLazyLoadingAndTheValueIsntLoadedMustReturnFalseInTheFunction;
    [Test]
    procedure WhenTheFieldIsLazyLoadingAndTheValueIsntLoadedMustReturnEmptyValueInParam;
    [Test]
    procedure IfTheFieldIsLazyLoadingAndHasntValueMustReturnFalseInHasValueFunction;
    [Test]
    procedure WhenFillTheLazyFieldValueMustLoadTheValueHasExpected;
    [Test]
    procedure WhenTheFieldIsManyValueAssociationMustLoadTheManyValuePropertyOfTheField;
    [Test]
    procedure WhenTheLazyFieldIsntLoadedAndHaveAKeyFilledMustReturnTheKeyValueInGetValueFunction;
    [Test]
    procedure WhenTheFieldIsRequiredMustLoadThisInfoInTheField;
    [TestCase('AnsiChar', 'AnsiChar')]
    [TestCase('AnsiString', 'AnsiString')]
    [TestCase('Char', 'Char')]
    [TestCase('Enumerator', 'Enumerator')]
    [TestCase('Float', 'Float')]
    [TestCase('Date', 'Date')]
    [TestCase('DateTime', 'DateTime')]
    [TestCase('Integer', 'Integer')]
    [TestCase('Int64', 'Int64')]
    [TestCase('String', 'String')]
    [TestCase('Time', 'Time')]
    procedure WhenThePropertyIsANativeTypeMustMarkTheFieldAsRequired(const FieldName: String);
    [Test]
    procedure WhenTheFieldIsAClassMustMarkAsNotRequired;
    [Test]
    procedure IfTheFieldIsANullableTypeMustBeMarkedHasNotRequired;
    [Test]
    procedure WhenANotRequiredPropertyHasTheRequiredAttributeMustMarkTheFieldHasRequired;
    [Test]
    procedure WhenAFieldIsAutoGeneratedMustLoadTheDefaultConstraintInfoOfTheField;
    [Test]
    procedure WhenTheFieldIsntAutoGeneratedTheDefaultConstraintMustBeNil;
    [Test]
    procedure TheDefaultConstraintMustHaveTheAutoGeneratedTypeLoadedHasExpected;
    [Test]
    procedure WhenTheAttributeIsASequenceMustLoadTheNameOfTheSequenceInTheDefaultConstraint;
    [Test]
    procedure WhenTheFieldHasTheFixedValueAttributeMustLoadTheValueInTheDefaultConstraint;
    [Test]
    procedure WhenTheFieldHasAForeignKeyToASpecialFieldTheSpecialTypeOfTheFieldMustBeEqualToThePrimaryKeyOfForeignKeyClass;
    [Test]
    procedure IfTheForeignKeyTableHasASpecialAttributeInThePrimaryKeyTheSpecialTypeOfTheFieldMustBeTheSame;
    [Test]
    procedure WhenTheForeignKeyTableHasAFloatKeyMustLoadThePrecisionAndSizeFromThePrimaryKey;
    [Test]
    procedure TheFieldTypeOfAForeignKeyMustBeEqualToThePrimaryKeyOfForeignKeyTable;
    [Test]
    procedure WhenTheTableHasAPrimaryKeyMustCreateAnIndexForThePrimaryKey;
    [Test]
    procedure TheNameOfPrimaryKeyIndexMustBeAsExpected;
    [Test]
    procedure ThePrimaryKeyIndexMustLoadThePrimaryKeyFieldInTheIndexFieldList;
    [Test]
    procedure ThePrimaryKeyIndexMustBeMarkedAsUniqueAndInPrimaryKey;
    [Test]
    procedure WhenLoadTheSchemaWithAClassInParamsTheMapperMustLoadOnlyTheClassesInTheUnitOfThatClass;
    [Test]
    procedure WhenLoadTheSchemaMustLoadAllClassesFromTheUnitsPassedInTheParams;
    [Test]
    procedure WhenAddADefaultRecordMustAddThisValueToTheTableOfTheObject;
    [Test]
    procedure WhenTheFieldAsTheSequenceAttributeMustLoadTheSequenceInTheList;
    [Test]
    procedure TheSequenceNameMustBeLoadedWithTheNameInsideTheAttribute;
    [Test]
    procedure WhenAlreadyExistsTheSequenceMappedMustRaiseAnError;
    [Test]
    procedure WhenTheClassHasntPublishedFieldsMustRaiseAnError;
  end;

  [Entity]
  TMyClass = class
  private
    FId: Integer;
    FValue: String;
  published
    property Id: Integer read FId write FId;
    property Value: String read FValue write FValue;
  end;

  TMyClassWithoutPublishedFields = class
  private
    FId: Integer;
  public
    property Id: Integer read FId write FId;
  end;

implementation

uses System.Variants, System.SysUtils, System.DateUtils, System.TypInfo, Persisto.Test.Entity, Translucent, Persisto.Rtti.Helper;

{ TMapperTest }

procedure TMapperTest.EveryPropertyThatIsAnObjectMustCreateAForeignKeyInTheListOfTheTable;
begin
  var Table := FMapper.LoadClass(TMyEntityWithFieldNameAttribute);

  Assert.AreEqual<Integer>(2, Length(Table.ForeignKeys));
end;

procedure TMapperTest.IfTheBaseClassHasTheSingleTableAttributeCantLoadBaseTableProperty;
begin
  var Table := FMapper.LoadClass(TMyEntityInheritedFromSingle);

  Assert.IsNull(Table.BaseTable);
end;

procedure TMapperTest.IfTheChildTableOfAManyValueAssociationHasntPrimaryKeyMustRaiseAnError;
begin
  Assert.WillRaise(
    procedure
    begin
      FMapper.LoadClass(TManyValueParentWithoutPrimaryKey);
    end, EChildTableMustHasToHaveAPrimaryKey);
end;

procedure TMapperTest.IfTheFieldInIndexNotExistsInTheTableMustRaiseAnError;
begin
  Assert.WillRaise(
    procedure
    begin
      FMapper.LoadClass(TMyClassWithIndexWithError);
    end);
end;

procedure TMapperTest.IfTheFieldIsAClassMustReturnFalseInTheHasValueFunctionIfTheClassValueIsNotLoaded;
begin
  var MyClass := TClassWithForeignKey.Create;
  var Table := FMapper.LoadClass(MyClass.ClassType);
  var Value: TValue;

  Assert.IsFalse(Table.Field['AnotherClass'].HasValue(MyClass, Value));

  MyClass.Free;
end;

procedure TMapperTest.IfTheFieldIsAClassMustReturnTrueInTheHasValueFunctionIfTheClassValueIsLoaded;
begin
  var MyClass := TClassWithForeignKey.Create;
  MyClass.AnotherClass := TClassWithPrimaryKey.Create;
  var Table := FMapper.LoadClass(MyClass.ClassType);
  var Value: TValue;

  Assert.IsTrue(Table.Field['AnotherClass'].HasValue(MyClass, Value));

  MyClass.AnotherClass.Free;

  MyClass.Free;
end;

procedure TMapperTest.IfTheFieldIsAnEnumeratorMustReturnTheOrdinalValueFromVariant;
begin
  var Field: TField;
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);
  var Value: Variant := Enum3;

  Table.FindField('Enumerator', Field);

  Assert.AreEqual(Enum3, Field.ConvertVariant(Value).AsType<TMyEnumerator>);
end;

procedure TMapperTest.IfTheFieldIsANullableTypeMustBeMarkedHasNotRequired;
begin
  var Table := FMapper.LoadClass(TClassWithNullableProperty);

  Assert.IsFalse(Table.Field['Nullable'].Required);
end;

procedure TMapperTest.IfTheFieldIsLazyAndHasAnValueLoadedMustReturnTrueInTheHasValueFunction;
begin
  var MyClass := TLazyClass.Create;
  MyClass.Lazy.Value := TMyEntity.Create;
  var Table := FMapper.LoadClass(MyClass.ClassType);
  var Value: TValue;

  Assert.IsTrue(Table.Field['Lazy'].HasValue(MyClass, Value));

  MyClass.Lazy.Value.Free;

  MyClass.Free;
end;

procedure TMapperTest.IfTheFieldIsLazyLoadingAndHasntValueMustReturnFalseInHasValueFunction;
begin
  var MyClass := TLazyClass.Create;
  var Table := FMapper.LoadClass(MyClass.ClassType);
  var Value: TValue;

  MyClass.Lazy.Value;

  Assert.IsFalse(Table.Field['Lazy'].HasValue(MyClass, Value));

  MyClass.Free;
end;

procedure TMapperTest.IfTheFieldIsNullableMustReturnFalseInTheHasValueFunctionIfTheValueNotLoaded;
begin
  var MyClass := TClassWithNullableProperty.Create;
  var Table := FMapper.LoadClass(MyClass.ClassType);
  var Value: TValue;

  Assert.IsFalse(Table.Field['Nullable'].HasValue(MyClass, Value));

  MyClass.Free;
end;

procedure TMapperTest.IfTheFindTableNotFoundTheClassMustRaiseAnError;
begin
  Assert.WillRaise(
    procedure
    begin
      FMapper.FindTable(TMyEntityWithoutEntityAttribute);
    end, ETableNotFound);
end;

procedure TMapperTest.IfTheForeignKeyHasTheNameAttributeTheDatabaseNameMustBeTheAttributeValue;
begin
  var Table := FMapper.LoadClass(TMyEntityForeignKeyWithName);

  Assert.AreEqual('MyForeignKey', Table.ForeignKeys[0].DatabaseName);
end;

procedure TMapperTest.IfTheForeignKeyTableHasASpecialAttributeInThePrimaryKeyTheSpecialTypeOfTheFieldMustBeTheSame;
begin
  var Table := FMapper.LoadClass(TForeignKeyClassToSpecialCase);

  Assert.AreEqual(stUniqueIdentifier, Table.Field['SpecialTypeForeignKey'].SpecialType)
end;

procedure TMapperTest.IfTheValueVariantIsNullValueMustReturnAEmptyTValue;
begin
  var Field: TField;
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);

  Table.FindField('AnsiString', Field);

  Assert.IsTrue(Field.ConvertVariant(NULL).IsEmpty);
end;

procedure TMapperTest.IfTheVariantValueIsGUIDValueMustConvertToTValueAsExpected;
begin
  var Field: TField;
  var GUIDValue := StringToGUID('{12345678-1234-1234-1234-123456789012}');
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);
  var Value: Variant := GUIDValue.ToString;

  Table.FindField('GUID', Field);

  Assert.AreEqual(GUIDValue, Field.ConvertVariant(Value).AsType<TGUID>);
end;

procedure TMapperTest.MappingAEntityWithForeignKeyToASingleInheritedClassCantRaiseError;
begin
  Assert.WillNotRaise(
    procedure
    begin
      FMapper.LoadClass(TMyEntityForeignKeyToConcrete);
    end);
end;

procedure TMapperTest.MustLoadTheFieldsInTheIndexHasExpected;
begin
  var MyField, MyField2: TField;
  var Table := FMapper.LoadClass(TMyClassWithIndex);

  Table.FindField('MyField', MyField);
  Table.FindField('MyField2', MyField2);

  Assert.AreEqual<NativeInt>(2, Length(Table.Indexes[2].Fields));
  Assert.AreEqual(MyField, Table.Indexes[2].Fields[0]);
  Assert.AreEqual(MyField2, Table.Indexes[2].Fields[1]);
end;

procedure TMapperTest.OnlyPublishedFieldMutsBeLoadedInTheTable;
begin
  var Table := FMapper.LoadClass(TMyEntity);

  Assert.AreEqual<Integer>(3, Length(Table.Fields));
end;

procedure TMapperTest.Setup;
begin
  FLazyLoader := TMock.CreateInterface<ILazyLoader>;
  FMapper := TMapper.Create;

  FLazyLoader.Setup.WillReturn(1234).When.GetKey;
end;

procedure TMapperTest.SetupFixture;
begin
  FContext.GetType(TClassWithPrimaryKey).QualifiedName;
end;

procedure TMapperTest.TearDown;
begin
  FLazyLoader := nil;

  FMapper.Free;
end;

procedure TMapperTest.TheAnotherVariantValuesMustJustConvertToTValue;
begin
  var Field: TField;
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);
  var Value: Variant := 123456;

  Table.FindField('Integer', Field);

  Assert.AreEqual(123456, Field.ConvertVariant(Value).AsInteger);
end;

procedure TMapperTest.TheClassWithTheSingleTableInheritanceAttributeCantBeMappedInTheTableList;
begin
  var Table: TTable;

  FMapper.LoadAll;

  Assert.IsFalse(FMapper.TryFindTable(TMyEntityWithSingleTableInheritanceAttribute.ClassInfo, Table));
end;

procedure TMapperTest.TheConversionOfTheTValueMustBeLikeExpected(TypeToConvert, ValueToCompare: String);
begin
  var FieldToCompare: TField := nil;
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);
  var Value: TValue;

  for var Field in Table.Fields do
    if Field.PropertyInfo.Name = TypeToConvert then
      FieldToCompare := Field;

  if TypeToConvert = 'AnsiChar' then
    Value := TValue.From(AnsiChar('C'))
  else if TypeToConvert = 'AnsiString' then
    Value := TValue.From(AnsiString('AnsiString'))
  else if TypeToConvert = 'Char' then
    Value := TValue.From(Char('C'))
  else if TypeToConvert = 'Class' then
    Value := 1234
  else if TypeToConvert = 'EmptyClass' then
    Value := TValue.From<TObject>(nil)
  else if TypeToConvert = 'Enumerator' then
    Value := TValue.From(Enum2)
  else if TypeToConvert = 'Float' then
    Value := 1234.456
  else if TypeToConvert = 'Date' then
    Value := TValue.From(EncodeDate(2020, 1, 31))
  else if TypeToConvert = 'DateTime' then
    Value := TValue.From(EncodeDateTime(2020, 1, 31, 12, 34, 56, 0))
  else if TypeToConvert = 'GUID' then
    Value := TValue.From(StringToGUID('{BD2BBA84-C691-4C5E-ABD3-4F32937C53F8}'))
  else if TypeToConvert = 'Integer' then
    Value := 1234
  else if TypeToConvert = 'Int64' then
    Value := Int64(1234)
  else if TypeToConvert = 'String' then
    Value := 'String'
  else if TypeToConvert = 'Time' then
    Value := TValue.From(TTime(EncodeTime(12, 34, 56, 0)))
  else
    raise Exception.Create('Test not mapped!');

  Assert.AreEqual(ValueToCompare, FieldToCompare.GetAsString(Value));

  if Value.IsObject then
    Value.AsObject.Free;
end;

procedure TMapperTest.TheDatabaseNameOfATableMustBeTheNameOfClassRemovingTheFirstCharOfTheClassName;
begin
  var Table := FMapper.LoadClass(TMyEntity);

  Assert.AreEqual('MyEntity', Table.DatabaseName);
end;

procedure TMapperTest.TheDefaultConstraintMustHaveTheAutoGeneratedTypeLoadedHasExpected;
begin
  var Table := FMapper.LoadClass(TAutoGeneratedClass);

  Assert.AreEqual(agtNewUniqueIdentifier, Table.Field['Id'].DefaultConstraint.AutoGeneratedType);
end;

procedure TMapperTest.TheFieldInPrimaryKeyMustBeMarkedWithInPrimaryKey;
begin
  var Table := FMapper.LoadClass(TMyEntity);

  Assert.IsTrue(Table.PrimaryKey.InPrimaryKey);
end;

procedure TMapperTest.TheFieldLinkingTheParentAndChildOfManyValueAssociationMustBeLoaded;
begin
  var ChildTable := FMapper.LoadClass(TMyEntityWithManyValueAssociationChild);
  var Table := FMapper.LoadClass(TMyEntityWithManyValueAssociation);

  Assert.AreEqual(ChildTable.Fields[1], Table.ManyValueAssociations[0].ForeignKey.Field);
end;

procedure TMapperTest.TheFieldOfAForeignKeyMustBeFilledWithTheFieldOfTheClassThatIsAForeignKey;
begin
  var Table := FMapper.LoadClass(TMyEntityWithFieldNameAttribute);

  Assert.AreEqual(Table.Fields[1], Table.ForeignKeys[0].Field);
end;

procedure TMapperTest.TheFieldsMustBeOrderedByPriorityFirstPrimaryKeyThenRegularFieldsThenForeignKeysThenManyValueAssociations;
begin
  var Table := FMapper.LoadClass(TUnorderedClass);

  Assert.AreEqual('Id', Table.Fields[0].DatabaseName);
  Assert.AreEqual('AField', Table.Fields[1].DatabaseName);
  Assert.AreEqual('BField', Table.Fields[2].DatabaseName);
  Assert.AreEqual('LastField', Table.Fields[5].DatabaseName);
  Assert.AreEqual('IdALazy', Table.Fields[3].DatabaseName);
  Assert.AreEqual('IdBLazy', Table.Fields[4].DatabaseName);
  Assert.AreEqual('IdAForeignKey', Table.Fields[6].DatabaseName);
  Assert.AreEqual('IdBForeignKey', Table.Fields[7].DatabaseName);
  Assert.AreEqual('AManyValue', Table.Fields[8].DatabaseName);
  Assert.AreEqual('BManyValue', Table.Fields[9].DatabaseName);
end;

procedure TMapperTest.TheFieldTablePropertyMustReturnTheFieldIfFoundIt;
begin
  var Field: TField;
  var Table := FMapper.LoadClass(TMyTestClass);

  Table.FindField('Field', Field);

  Assert.AreEqual(Field, Table.Field['Field']);
end;

procedure TMapperTest.TheFieldThatGenerateAForignKeyMustLoadThisInfoInTheField;
begin
  var Table := FMapper.LoadClass(TClassWithForeignKey);

  Assert.IsNotNull(Table.Fields[1].ForeignKey);
end;

procedure TMapperTest.TheFieldTypeOfAForeignKeyMustBeEqualToThePrimaryKeyOfForeignKeyTable;
begin
  var Table := FMapper.LoadClass(TForeignKeyClassToSpecialCase);

  Assert.AreEqual(FContext.GetType(TypeInfo(Double)), Table.Field['FloatForeignKey'].FieldType);
end;

procedure TMapperTest.TheFindFieldFunctionMustReturnTheFieldDefinitionWhenFindTheField;
begin
  var Field: TField;
  var Table := FMapper.LoadClass(TUnorderedClass);

  Table.FindField('BForeignKey', Field);

  Assert.AreEqual(Table.Fields[7], Field);
end;

procedure TMapperTest.TheFindFieldFunctionMustReturnTrueIfTheFieldExistsInTheTable;
begin
  var Field: TField;
  var Table := FMapper.LoadClass(TUnorderedClass);

  Assert.IsTrue(Table.FindField('BForeignKey', Field));
end;

procedure TMapperTest.TheFindTableWithTypeInfoMustRaiseAnErrorIfNotFindTheTable;
begin
  Assert.WillRaise(
    procedure
    begin
      FMapper.FindTable(TMyEntityWithoutEntityAttribute.ClassInfo);
    end, ETableNotFound);
end;

procedure TMapperTest.TheFindTableWithTypeInfoMustReturnTheTableHasExpected;
begin
  FMapper.LoadClass(TClassWithForeignKey);

  Assert.IsNotNull(FMapper.FindTable(TClassWithForeignKey.ClassInfo));
end;

procedure TMapperTest.TheForeignKeyCreatedForTheInheritanceMustBeMarkedHasInheritanceLink;
begin
  var Table := FMapper.LoadClass(TMyEntityInheritedFromSimpleClass);

  Assert.IsTrue(Table.ForeignKeys[0].IsInheritedLink);
end;

procedure TMapperTest.TheForeignKeyDatabaseNameMustBeTheConcatenationOfTheTablesAndFieldInfo;
begin
  var Table := FMapper.LoadClass(TMyEntityForeignKeyAlias);

  Assert.AreEqual('FK_MyEntityForeignKeyAlias_MyEntityInheritedFromSimpleClass_IdForeignKey', Table.ForeignKeys[0].DatabaseName);
end;

procedure TMapperTest.TheFunctionGetValueFromFieldMustReturnTheValueOfThePropertyOfTheField;
begin
  var MyClass := TMyEntityWithAllTypeOfFields.Create;
  MyClass.&String := 'My Field';
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);

  var Field := Table.Field['String'];

  Assert.AreEqual('My Field', Field.GetValue(MyClass).AsString);

  MyClass.Free;
end;

procedure TMapperTest.TheGetCacheFunctionWithAnInstanceMustBuildTheKeyWithTheClassOfTheInstanceNotFromTable;
begin
  var MyClass := TClassForeignKey.Create;
  MyClass.Id := 123456;
  var Table := FMapper.LoadClass(TClassWithPrimaryKey);

  Assert.AreEqual('Persisto.Test.Entity.TClassForeignKey.123456', Table.GetCacheKey(MyClass));

  MyClass.Free;
end;

procedure TMapperTest.TheLoadingOfForeingKeyMustBeAfterAllTablesAreLoadedToTheFindTableWorksPropertily;
begin
  var Table := FMapper.LoadClass(TZZZZ);

  Assert.IsNotNull(Table.ForeignKeys[0].ParentTable);
end;

procedure TMapperTest.TheManyValueAssociationMustLoadTheFieldThatGeneratedTheValue;
begin
  var Table := FMapper.LoadClass(TMyEntityWithManyValueAssociation);

  Assert.AreEqual(Table.Fields[1], Table.ManyValueAssociations[0].Field);
end;

procedure TMapperTest.TheNameOfManyValueAssociationLinkCanBeDefinedByTheAttributeToTheLinkHappen;
begin
  var Table := FMapper.LoadClass(TMyEntityWithManyValueAssociation);

  Assert.AreEqual('ManyValueAssociation', Table.ManyValueAssociations[0].ForeignKey.Field.PropertyInfo.Name);
end;

procedure TMapperTest.TheNameOfPrimaryKeyIndexMustBeAsExpected;
begin
  var Table := FMapper.LoadClass(TMyEntity2);

  Assert.AreEqual('PK_AnotherTableName', Table.Indexes[0].DatabaseName);
end;

procedure TMapperTest.ThenMakeAForeignKeyToASingleTableInheritanceMustRaiseAnError;
begin
  Assert.WillRaise(
    procedure
    begin
      FMapper.LoadClass(TMyEntityForeignKeyToAnotherSingle);
    end, EForeignKeyToSingleTableInheritanceTable);
end;

procedure TMapperTest.TheParentTableMustBeTheTableLinkedToTheField;
begin
  var ParentTable := FMapper.LoadClass(TMyEntityWithPrimaryKey);
  var Table := FMapper.LoadClass(TMyEntityWithFieldNameAttribute);

  Assert.AreEqual(ParentTable, Table.ForeignKeys[0].ParentTable);
end;

procedure TMapperTest.ThePrimaryKeyCantBeNullable;
begin
  Assert.WillRaise(
    procedure
    begin
      FMapper.LoadClass(TClassWithPrimaryKeyNullableProperty);
    end, EClassWithPrimaryKeyNullable);
end;

procedure TMapperTest.ThePrimaryKeyIndexMustBeMarkedAsUniqueAndInPrimaryKey;
begin
  var Table := FMapper.LoadClass(TClassWithPrimaryKey);

  Assert.IsTrue(Table.Indexes[0].PrimaryKey);

  Assert.IsTrue(Table.Indexes[0].Unique);
end;

procedure TMapperTest.ThePrimaryKeyIndexMustLoadThePrimaryKeyFieldInTheIndexFieldList;
begin
  var Table := FMapper.LoadClass(TClassWithPrimaryKey);

  Assert.AreEqual<NativeInt>(1, Length(Table.Indexes[0].Fields));

  Assert.AreEqual(Table.PrimaryKey, Table.Indexes[0].Fields[0]);
end;

procedure TMapperTest.ThePrimaryKeyReferenceInAnInheritedClassMustHaveSameTypeOfTheKeyOfTheBaseType;
begin
  var TableChild := FMapper.LoadClass(TMyEntityInheritedFromSimpleClass);
  var TableParent := FMapper.LoadClass(TMyEntityInheritedFromSingle);

  Assert.AreEqual(TableParent.PrimaryKey, TableChild.PrimaryKey);
end;

procedure TMapperTest.TheSequenceNameMustBeLoadedWithTheNameInsideTheAttribute;
begin
  var Mapper := TMapper.Create;

  Mapper.LoadClass(TAutoGeneratedClass);

  Assert.AreEqual('MySequence', Mapper.Sequences[0].Name);

  Mapper.Free;
end;

procedure TMapperTest.TheTableOfManyValueAssociationMustBeTheChildTableOfThisLink;
begin
  var ChildTable := FMapper.LoadClass(TMyEntityWithManyValueAssociationChild);
  var Table := FMapper.LoadClass(TMyEntityWithManyValueAssociation);

  Assert.AreEqual(ChildTable, Table.ManyValueAssociations[0].ChildTable);
end;

procedure TMapperTest.WhenAClassDoesNotHaveThePrimaryKeyAttributeAndHasAnIdFieldThisWillBeThePrimaryKey;
begin
  var Table := FMapper.LoadClass(TMyEntity2);

  Assert.AreEqual('Id', Table.PrimaryKey.DatabaseName);
end;

procedure TMapperTest.WhenAClassIsInheritedFromAClassWithTheSingleTableInheritanceAttributeCantGenerateAnyForeignKey;
begin
  Assert.AreEqual<Integer>(0, Length(FMapper.LoadClass(TMyEntityInheritedFromSingle).ForeignKeys));
end;

procedure TMapperTest.WhenAClassIsInheritedFromAClassWithTheSingleTableInheritanceAttributeMustLoadAllFieldsInTheTable;
begin
  Assert.AreEqual<Integer>(3, Length(FMapper.LoadClass(TMyEntityInheritedFromSingle).Fields));
end;

procedure TMapperTest.WhenAClassIsInheritedFromAClassWithTheSingleTableInheritanceAttributeThePrimaryKeyMustBeLoadedFromTheTopClass;
begin
  var Table := FMapper.LoadClass(TMyEntityInheritedFromSingle);

  Assert.IsTrue(Assigned(Table.PrimaryKey));
end;

procedure TMapperTest.WhenAClassWithManyValueAssociationHasAChildClassWithMoreThenOneForeignKeyToParentClassMustLoadTheForeignKeyWithTheSameNameOfTheParentTable;
begin
  var Table := FMapper.LoadClass(TManyValueAssociationParent);

  Assert.AreEqual('IdManyValueAssociationParent', Table.ManyValueAssociations[0].ForeignKey.Field.DatabaseName);
end;

procedure TMapperTest.WhenAddADefaultRecordMustAddThisValueToTheTableOfTheObject;
begin
  var MyClass := TMyClass.Create;
  var Table := FMapper.LoadClass(MyClass.ClassType);

  FMapper.AddDefaultRecord(MyClass);

  Assert.AreEqual(1, Table.DefaultRecords.Count);

  MyClass.Free;
end;

procedure TMapperTest.WhenAFieldIsAForeignKeyThePropertyIsForeignKeyMustReturnTrue;
begin
  var Table := FMapper.LoadClass(TMyEntityWithManyValueAssociationChild);

  var Field := Table.Fields[1];

  Assert.IsTrue(Field.IsForeignKey);
end;

procedure TMapperTest.WhenAFieldIsAForeignKeyThePropertyIsJoinLinkMustReturnTrue;
begin
  var Table := FMapper.LoadClass(TMyEntityWithManyValueAssociationChild);

  var Field := Table.Fields[1];

  Assert.IsTrue(Field.IsJoinLink);
end;

procedure TMapperTest.WhenAFieldIsAManyValueAssociationThePropertyIsJoinLinkReturnTrue;
begin
  var Table := FMapper.LoadClass(TMyEntityWithManyValueAssociation);

  var Field := Table.Fields[1];

  Assert.IsTrue(Field.IsJoinLink);
end;

procedure TMapperTest.WhenAFieldIsAManyValueAssociationThePropertyIsManyValueAssociationReturnTrue;
begin
  var Table := FMapper.LoadClass(TMyEntityWithManyValueAssociation);

  var Field := Table.Field['ManyValueAssociationList'];

  Assert.IsTrue(Field.IsManyValueAssociation);
end;

procedure TMapperTest.WhenAFieldIsAutoGeneratedMustLoadTheDefaultConstraintInfoOfTheField;
begin
  var Table := FMapper.LoadClass(TAutoGeneratedClass);

  Assert.IsNotNull(Table.Field['Id'].DefaultConstraint);
end;

procedure TMapperTest.WhenAFieldIsWithTheAutoGeneratedAttributeMustLoadAsTrueThePropertyInField;
begin
  var Table := FMapper.LoadClass(TMyEntity);

  Assert.IsTrue(Table.Fields[0].AutoGenerated);
end;

procedure TMapperTest.WhenAForeignKeyFieldHasTheFieldNameAttributeThisMustBeTheDatabaseNameField;
begin
  var Table := FMapper.LoadClass(TClassWithNamedForeignKey);

  Assert.AreEqual('MyFk', Table.Fields[1].DatabaseName);
end;

procedure TMapperTest.WhenAlreadyExistsTheSequenceMappedMustRaiseAnError;
begin
  var Mapper := TMapper.Create;

  Assert.WillRaise(
    procedure
    begin
      Mapper.LoadClass(TAutoGeneratedClass);

      Mapper.LoadClass(TClassWithSequence);
    end, ESequenceAlreadyExists);

  Mapper.Free;
end;

procedure TMapperTest.WhenANotRequiredPropertyHasTheRequiredAttributeMustMarkTheFieldHasRequired;
begin
  var Table := FMapper.LoadClass(TRequiredClass);

  Assert.IsTrue(Table.Field['RequiredObject'].Required);
end;

procedure TMapperTest.WhenAPropertyIsAnArrayMustLoadAManyValueLink;
begin
  var Table := FMapper.LoadClass(TMyEntityWithManyValueAssociation);

  Assert.AreEqual<Integer>(1, Length(Table.ManyValueAssociations));
end;

procedure TMapperTest.WhenATableIsLoadedMustFillTheMapperPropertyOfTheTable;
begin
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);

  Assert.AreEqual(FMapper, Table.Mapper);
end;

procedure TMapperTest.WhenCallGetCacheKeyMustBuildTheValueOfTheCacheKeyWithThePrimaryKeyValueFromTheClass;
begin
  var MyClass := TClassWithPrimaryKey.Create;
  MyClass.Id := 123456;
  var Table := FMapper.LoadClass(TClassWithPrimaryKey);

  Assert.AreEqual('Persisto.Test.Entity.TClassWithPrimaryKey.123456', Table.GetCacheKey(MyClass));

  MyClass.Free;
end;

procedure TMapperTest.WhenCallGetCacheValueWithVariantAndTheTableDontHavePrimaryKeyMustLoadTheKeyAsExpected;
begin
  var Table := FMapper.LoadClass(TMyEntityWithoutPrimaryKey);

  Assert.AreEqual('Persisto.Test.Entity.TMyEntityWithoutPrimaryKey.', Table.GetCacheKey(1234));
end;

procedure TMapperTest.WhenCallGetCacheValueWithVariantMustBuildTheKeyAsExpected;
begin
  var Table := FMapper.LoadClass(TClassWithPrimaryKey);

  Assert.AreEqual('Persisto.Test.Entity.TClassWithPrimaryKey.123456', Table.GetCacheKey(123456));
end;

procedure TMapperTest.WhenCallLoadAllMoreThemOneTimeCantRaiseAnError;
begin
  FMapper.LoadAll;

  Assert.WillNotRaise(FMapper.LoadAll);
end;

procedure TMapperTest.WhenCallLoadAllMustLoadAllClassesWithTheEntityAttribute;
begin
  FMapper.LoadAll;

  Assert.IsTrue(Length(FMapper.Tables) > 0, 'No entities loaded!');
end;

procedure TMapperTest.WhenFillTheLazyFieldValueMustLoadTheValueHasExpected;
begin
  var LazyValue := TMyEntity.Create;
  var MyClass := TLazyClass.Create;

  var Table := FMapper.LoadClass(MyClass.ClassType);

  Table.Field['Lazy'].SetValue(MyClass, LazyValue);

  Assert.AreEqual(LazyValue, MyClass.Lazy.Value);

  LazyValue.Free;

  MyClass.Free;
end;

procedure TMapperTest.WhenGetPropertyValueMustReturnTheValueOfTheProperty;
begin
  var MyClass := TLazyClass.Create;
  MyClass.Id := 123;
  var Table := FMapper.LoadClass(TLazyClass);

  Assert.AreEqual(123, Table.Fields[0].GetPropertyValue(MyClass).AsInteger);

  MyClass.Free;
end;

procedure TMapperTest.WhenGetTheStringValueOfANullableTypeAndTheValueIsFilledMustReturnTheValue;
begin
  var Table := FMapper.LoadClass(TClassWithNullableProperty);
  var TheValue := TClassWithNullableProperty.Create;
  TheValue.Nullable := 123456;

  Assert.AreEqual('123456', Table.Fields[1].GetAsString(TheValue));

  TheValue.Free;
end;

procedure TMapperTest.WhenGetTheStringValueOfANullableTypeAndTheValueIsNullMustReturnTheNullStringValue;
begin
  var Table := FMapper.LoadClass(TClassWithNullableProperty);
  var TheValue := TClassWithNullableProperty.Create;

  Assert.AreEqual('null', Table.Fields[1].GetAsString(TheValue));

  TheValue.Free;
end;

procedure TMapperTest.WhenGetTheStringValueOfLazyPropertyMustReturnThePrimaryKeyValueOfLoadedValue;
begin
  var Table := FMapper.LoadClass(TLazyClass);
  var TheEntity := TMyEntity.Create;
  var TheValue := TLazyClass.Create;
  TheValue.Lazy.Value := TheEntity;
  TheValue.Lazy.Value.Id := 123456;

  Assert.AreEqual('123456', Table.Fields[1].GetAsString(TheValue));

  TheEntity.Free;

  TheValue.Free;
end;

procedure TMapperTest.WhenGetTheValueOfTheFieldAsStringMustBuildTheStringAsExpected(FieldName: String);
begin
  var MyClass := TMyEntityWithAllTypeOfFields.Create;
  var ValueToCompare := EmptyStr;

  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);

  var FieldToCompare := Table.Field[FieldName];

  MyClass.AnsiChar := 'C';
  MyClass.AnsiString := 'AnsiString';
  MyClass.Char := 'C';
  MyClass.&Class := TMyEntityWithPrimaryKey.Create;
  MyClass.&Class.Value := 222.333;
  MyClass.Date := EncodeDate(2020, 1, 31);
  MyClass.DateTime := EncodeDate(2020, 1, 31) + EncodeTime(12, 34, 56, 0);
  MyClass.Enumerator := Enum2;
  MyClass.Float := 1234.456;
  MyClass.GUID := StringToGUID('{BD2BBA84-C691-4C5E-ABD3-4F32937C53F8}');
  MyClass.Integer := 1234;
  MyClass.Int64 := 1234;
  MyClass.&String := 'String';
  MyClass.Time := EncodeTime(12, 34, 56, 0);

  case FieldToCompare.PropertyInfo.PropertyType.TypeKind of
    tkChar, tkWChar: ValueToCompare := '''C''';
    tkEnumeration: ValueToCompare := '1';
    tkFloat:
    begin
      if FieldToCompare.PropertyInfo.PropertyType.Handle = TypeInfo(TDate) then
        ValueToCompare := '''2020-01-31'''
      else if FieldToCompare.PropertyInfo.PropertyType.Handle = TypeInfo(TTime) then
        ValueToCompare := '''12:34:56'''
      else if FieldToCompare.PropertyInfo.PropertyType.Handle = TypeInfo(TDateTime) then
        ValueToCompare := '''2020-01-31T12:34:56.000'''
      else
        ValueToCompare := '1234.456';
    end;
    tkInteger, tkInt64: ValueToCompare := '1234';
    tkRecord: ValueToCompare := '''{BD2BBA84-C691-4C5E-ABD3-4F32937C53F8}''';
    tkLString: ValueToCompare := '''AnsiString''';
    tkUString: ValueToCompare := '''String''';
    tkClass:
      if FieldName = 'Class' then
        ValueToCompare := '222.333'
      else
        ValueToCompare := 'null';
  end;

  Assert.AreEqual(ValueToCompare, FieldToCompare.GetAsString(MyClass));

  MyClass.&Class.Free;

  MyClass.Free;
end;

procedure TMapperTest.WhenGetValueOfAndFieldNullableMustReturnEmptyIfHasNoValue;
begin
  var MyClass := TClassWithNullableProperty.Create;
  var Table := FMapper.LoadClass(MyClass.ClassType);

  var Field := Table.Field['Nullable'];

  Assert.IsTrue(Field.GetValue(MyClass).IsEmpty);

  MyClass.Free;
end;

procedure TMapperTest.WhenLoadAClassMustKeepTheOrderingOfTablesToTheFindTableContinueToWorking;
begin
  FMapper.LoadClass(TMyEntity2);

  FMapper.LoadClass(TMyEntity);

  FMapper.LoadClass(TMyEntity3);

  var Table := FMapper.FindTable(TMyEntity);

  Assert.AreEqual<TRttiType>(FContext.GetType(TMyEntity), Table.ClassTypeInfo);
end;

procedure TMapperTest.WhenLoadAFieldMustFillThePropertyWithThePropertyInfo;
begin
  var Table := FMapper.LoadClass(TMyEntity3);
  var TypeInfo := FContext.GetType(TMyEntity3).GetProperties[0];

  Assert.AreEqual<TObject>(TypeInfo, Table.Fields[0].PropertyInfo);
end;

procedure TMapperTest.WhenLoadAFieldMustLoadTheFieldTypeWithTheTypeOfTheProperty;
begin
  var IntegerType := FContext.GetType(TypeInfo(Integer));
  var Table := FMapper.LoadClass(TClassWithNullableProperty);

  Assert.AreEqual(IntegerType, Table.Fields[0].FieldType);
end;

procedure TMapperTest.WhenLoadANullableFieldMustLoadTheFieldTypeWithTheInternalNullableType;
begin
  var IntegerType := FContext.GetType(TypeInfo(Integer));
  var Table := FMapper.LoadClass(TClassWithNullableProperty);

  Assert.AreEqual(IntegerType, Table.Fields[1].FieldType);
end;

procedure TMapperTest.WhenLoadATableMustLoadAllFieldsToo;
begin
  var Table := FMapper.LoadClass(TMyEntity);

  Assert.AreEqual<Integer>(3, Length(Table.Fields));
end;

procedure TMapperTest.WhenLoadATableWithSingleInheritenceMustLoadTheFieldsOfAllLevels;
begin
  Assert.AreEqual<NativeInt>(4, Length(FMapper.LoadClass(TAnotherSingleInheritedConcrete).Fields));
end;

procedure TMapperTest.WhenLoadMoreThenOneTimeTheSameClassCantRaiseAnError;
begin
  Assert.WillNotRaise(
    procedure
    begin
      FMapper.LoadClass(TMyEntity);

      FMapper.LoadClass(TMyEntity);
    end);
end;

procedure TMapperTest.WhenLoadTheFieldOfATableMustLoadTheNameOfTheFieldWithThePropertyName;
begin
  var Table := FMapper.LoadClass(TMyEntityWithFieldNameAttribute);

  Assert.AreEqual('Name', Table.Fields[0].Name);
end;

procedure TMapperTest.WhenLoadTheIndexMustLoadTheNameOfTheIndexHasExpected;
begin
  var Table := FMapper.LoadClass(TMyClassWithIndex);

  Assert.AreEqual('MyIndex', Table.Indexes[1].DatabaseName);
  Assert.AreEqual('MyIndex2', Table.Indexes[2].DatabaseName);
  Assert.AreEqual('MyUnique', Table.Indexes[3].DatabaseName);
end;

procedure TMapperTest.WhenLoadTheSchemaMustLoadAllClassesFromTheUnitsPassedInTheParams;
begin
  var Table: TTable;

  FMapper.LoadAll([TMyClass, TMyTestClass]);

  Assert.IsTrue(FMapper.TryFindTable(TypeInfo(TMyClass), Table));

  Assert.IsTrue(FMapper.TryFindTable(TypeInfo(TMyTestClass), Table));

  Assert.IsTrue(FMapper.TryFindTable(TypeInfo(TClassWithPrimaryKeyAttribute), Table));
end;

procedure TMapperTest.WhenLoadTheSchemaWithAClassInParamsTheMapperMustLoadOnlyTheClassesInTheUnitOfThatClass;
begin
  var Table: TTable;

  FMapper.LoadAll([TMyClass]);

  Assert.IsFalse(FMapper.TryFindTable(TypeInfo(TMyTestClass), Table));
end;

procedure TMapperTest.WhenLoadTheTableMustLoadTheNameOfTheTableWithTheNameOfTheClassWithoutTheTChar;
begin
  var Table := FMapper.LoadClass(TMyEntity2);

  Assert.AreEqual('MyEntity2', Table.Name);
end;

procedure TMapperTest.WhenMapAForeignKeyIsToAClassWithoutAPrimaryKeyMustRaiseAnError;
begin
  Assert.WillRaise(
    procedure
    begin
      FMapper.LoadClass(TMyEntityForeignKeyToClassWithoutPrimaryKey);
    end, EClassWithoutPrimaryKeyDefined);
end;

procedure TMapperTest.WhenMappingALazyArrayClassCantRaiseAnyError;
begin
  Assert.WillNotRaise(
    procedure
    begin
      FMapper.LoadClass(TLazyArrayClass);
    end);
end;

procedure TMapperTest.WhenMappingALazyArrayClassMustLoadTheFieldWithTheExpectedPropertyValueFilled;
begin
  var Table := FMapper.LoadClass(TLazyArrayClass);

  var Field := Table['LazyArray'];

  Assert.IsFalse(Field.IsForeignKey, 'Not a foreign key');

  Assert.IsTrue(Field.IsManyValueAssociation, 'Is many value association');

  Assert.IsTrue(Field.IsJoinLink, 'Is join link');

  Assert.IsTrue(Field.IsLazy, 'Is lazy');
end;

procedure TMapperTest.WhenSetValueFieldMustLoadThePropertyOfTheClassAsWithTheValueExpected(FieldName: String);
begin
  var FieldToCompare: TField := nil;
  var MyClass := TMyEntityWithAllTypeOfFields.Create;
  var ValueToCompare := NULL;

  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);

  for var Field in Table.Fields do
    if Field.DatabaseName = FieldName then
      FieldToCompare := Field;

  case FieldToCompare.PropertyInfo.PropertyType.TypeKind of
    tkChar: ValueToCompare := AnsiChar('C');
    tkEnumeration: ValueToCompare := Enum2;
    tkFloat: ValueToCompare := Double(1234.456);
    tkInt64: ValueToCompare := Int64(1234);
    tkInteger: ValueToCompare := 1234;
    tkRecord: ValueToCompare := '{BD2BBA84-C691-4C5E-ABD3-4F32937C53F8}';
    tkLString: ValueToCompare := AnsiString('AnsiString');
    tkUString: ValueToCompare := 'String';
    tkWChar: ValueToCompare := Char('C');
  end;

  FieldToCompare.SetValue(MyClass, ValueToCompare);

  if FieldToCompare.PropertyInfo.PropertyType.TypeKind = tkRecord then
    Assert.AreEqual<String>(ValueToCompare, FieldToCompare.GetValue(MyClass).AsType<TGUID>.ToString)
  else
    Assert.AreEqual(ValueToCompare, FieldToCompare.GetValue(MyClass).AsVariant);

  MyClass.Free;
end;

procedure TMapperTest.WhenTheAttributeIsASequenceMustLoadTheNameOfTheSequenceInTheDefaultConstraint;
begin
  var Table := FMapper.LoadClass(TAutoGeneratedClass);

  Assert.AreEqual('MySequence', Table.Field['Sequence'].DefaultConstraint.Sequence.Name);
end;

procedure TMapperTest.WhenTheChildClassIsDeclaredBeforeTheParentClassTheLinkBetweenOfTablesMustBeCreated;
begin
  var Table := FMapper.LoadClass(TMyEntityWithManyValueAssociation);

  Assert.AreEqual<Integer>(1, Length(Table.ManyValueAssociations));
end;

procedure TMapperTest.WhenTheClassDontHaveAPrimaryKeyMustLoadTheCacheKeyWithoutThePrimaryKeyValue;
begin
  var MyClass := TMyEntityWithoutPrimaryKey.Create;
  var Table := FMapper.LoadClass(TMyEntityWithoutPrimaryKey);

  Assert.AreEqual('Persisto.Test.Entity.TMyEntityWithoutPrimaryKey.', Table.GetCacheKey(MyClass));

  MyClass.Free;
end;

procedure TMapperTest.WhenTheClassHasAForeignKeyAndTheKeyTableIsntLoadedMustLoadTheTableFirstAndNotRaiseAnError;
begin
  Assert.WillNotRaise(
    procedure
    begin
      FMapper.LoadClass(TMyEntityForeignKeyAlias);
    end);
end;

procedure TMapperTest.WhenTheClassHasASimpleInheritenceMustLoadTheBaseTableProperty;
begin
  var Table := FMapper.LoadClass(TMyEntityInheritedFromSimpleClass);

  Assert.AreEqual(FMapper.FindTable(TMyEntityInheritedFromSingle), Table.BaseTable);
end;

procedure TMapperTest.WhenTheClassHasntPublishedFieldsMustRaiseAnError;
begin
  Assert.WillRaise(
    procedure
    begin
      FMapper.LoadClass(TMyClassWithoutPublishedFields);
    end, ETableWithoutPublishedFields);
end;

procedure TMapperTest.WhenTheClassHasTheIndexAnnotationMustLoadTheIndexInfoOfTheTable;
begin
  var Table := FMapper.LoadClass(TMyClassWithIndex);

  Assert.AreEqual<NativeInt>(4, Length(Table.Indexes));
end;

procedure TMapperTest.WhenTheClassHaveThePrimaryKeyAttributeThePrimaryKeyWillBeTheFieldFilled;
begin
  var Table := FMapper.LoadClass(TMyEntityWithPrimaryKey);

  Assert.AreEqual('Value', Table.PrimaryKey.DatabaseName);
end;

procedure TMapperTest.WhenTheClassHaveTheTableNameAttributeTheDatabaseNameMustBeLikeTheNameInAttribute;
begin
  var Table := FMapper.LoadClass(TMyEntity2);

  Assert.AreEqual('AnotherTableName', Table.DatabaseName);
end;

procedure TMapperTest.WhenTheClassInheritsFromObjectCantRaiseAnyError;
begin
  Assert.WillNotRaise(
    procedure
    begin
      FMapper.LoadClass(TZZZZ);
    end);
end;

procedure TMapperTest.WhenTheClassIsInheritedFromANormalClassCantLoadFieldsFormTheBaseClass;
begin
  Assert.AreEqual<Integer>(2, Length(FMapper.LoadClass(TMyEntityInheritedFromSimpleClass).Fields));
end;

procedure TMapperTest.WhenTheClassIsInheritedFromANormalClassMustCreateAForeignKeyForTheBaseClass;
begin
  Assert.AreEqual<Integer>(1, Length(FMapper.LoadClass(TMyEntityInheritedFromSimpleClass).ForeignKeys));
end;

procedure TMapperTest.WhenTheClassIsInheritedFromTObjectCantCreateAForeignKeyForThatClass;
begin
  Assert.AreEqual<Integer>(0, Length(FMapper.LoadClass(TMyEntity).ForeignKeys));
end;

procedure TMapperTest.WhenTheClassIsInheritedMustLoadThePrimaryKeyFromBaseClass;
begin
  var Table := FMapper.LoadClass(TMyEntityInheritedFromSimpleClass);

  Assert.IsTrue(Assigned(Table.PrimaryKey));
end;

procedure TMapperTest.WhenTheClassIsInheritedMustShareTheSamePrimaryKeyFromTheBaseClass;
begin
  var BaseTable := FMapper.LoadClass(TMyEntityInheritedFromSingle);
  var Table := FMapper.LoadClass(TMyEntityInheritedFromSimpleClass);

  Assert.AreSame(BaseTable.PrimaryKey, Table.PrimaryKey);
end;

procedure TMapperTest.WhenTheFieldHasFieldInfoAttributeWithSpecialTypeFilledMustLoadThisInfoInTheField;
begin
  var Table := FMapper.LoadClass(TMyTestClass);

  Assert.AreEqual(stUniqueIdentifier, Table.Fields[0].SpecialType);
end;

procedure TMapperTest.WhenTheFieldAsTheSequenceAttributeMustLoadTheSequenceInTheList;
begin
  var Mapper := TMapper.Create;

  Mapper.LoadClass(TAutoGeneratedClass);

  Assert.AreEqual<NativeInt>(1, Length(Mapper.Sequences));

  Mapper.Free;
end;

procedure TMapperTest.WhenTheFieldHasAForeignKeyToASpecialFieldTheSpecialTypeOfTheFieldMustBeEqualToThePrimaryKeyOfForeignKeyClass;
begin
  var Table := FMapper.LoadClass(TForeignKeyClassToSpecialCase);

  Assert.AreEqual(stDateTime, Table.Field['DateTimeForeignKey'].SpecialType)
end;

procedure TMapperTest.WhenTheFieldHasFieldInfoAttributeWithPrecisionAndScaleFilledMustLoadThisInfoInTheField;
begin
  var Table := FMapper.LoadClass(TMyTestClass);

  Assert.AreEqual(15, Table.Fields[2].Size);
  Assert.AreEqual(7, Table.Fields[2].Scale);
end;

procedure TMapperTest.WhenTheFieldHasFieldInfoAttributeWithSizeFilledMustLoadThisInfoInTheField;
begin
  var Table := FMapper.LoadClass(TMyTestClass);

  Assert.AreEqual(150, Table.Fields[1].Size);
end;

procedure TMapperTest.WhenTheFieldHasTheFixedValueAttributeMustLoadTheValueInTheDefaultConstraint;
begin
  var Table := FMapper.LoadClass(TAutoGeneratedClass);

  Assert.AreEqual('MyValue', Table.Field['FixedValue'].DefaultConstraint.FixedValue);
end;

procedure TMapperTest.WhenTheFieldHasTheNoUpdateAttributeTheFieldMustBeMarkedAsReadOnly;
begin
  var Table := FMapper.LoadClass(TClassWithNoUpdateAttribute);

  Assert.IsTrue(Table.Field['NoUpdate'].IsReadOnly);
end;

procedure TMapperTest.WhenTheFieldHaveTheFieldNameAttributeMustLoadThisNameInTheDatabaseName;
begin
  var Table := FMapper.LoadClass(TMyEntityWithFieldNameAttribute);

  Assert.AreEqual('AnotherFieldName', Table.Fields[0].DatabaseName);
end;

procedure TMapperTest.WhenTheFieldIsAClassMustFillTheDatabaseNameWithIdPlusPropertyName;
begin
  var Table := FMapper.LoadClass(TMyEntityWithFieldNameAttribute);

  Assert.AreEqual('IdMyForeignKey', Table.Fields[1].DatabaseName);
end;

procedure TMapperTest.WhenTheFieldIsAClassMustMarkAsNotRequired;
begin
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);

  Assert.IsFalse(Table.Field['Class'].Required);
end;

procedure TMapperTest.WhenTheFieldIsAForeignKeyMustAppendTheIdInTheDatabaseNameOfTheField;
begin
  var Table := FMapper.LoadClass(TLazyClass);

  Assert.AreEqual('IdLazy', Table.Fields[1].DatabaseName);
end;

procedure TMapperTest.WhenTheFieldIsLazyLoadingAndTheValueIsntLoadedMustReturnEmptyValueInParam;
begin
  var MyClass := TLazyClass.Create;
  var Table := FMapper.LoadClass(MyClass.ClassType);
  var Value: TValue := 123;

  Table.Field['Lazy'].HasValue(MyClass, Value);

  Assert.IsTrue(Value.IsEmpty);

  MyClass.Free;
end;

procedure TMapperTest.WhenTheFieldIsLazyLoadingAndTheValueIsntLoadedMustReturnFalseInTheFunction;
begin
  var MyClass := TLazyClass.Create;
  var Table := FMapper.LoadClass(MyClass.ClassType);
  var Value: TValue;

  Assert.IsFalse(Table.Field['Lazy'].HasValue(MyClass, Value));

  MyClass.Free;
end;

procedure TMapperTest.WhenTheFieldIsBooleanTypeMustLoadTheSpecialTypeWithBoolean;
begin
  var Mapper := TMapper.Create;
  var Table := Mapper.LoadClass(TMyEntityWithAllTypeOfFields);

  Assert.AreEqual(stBoolean, Table.Field['Boolean'].SpecialType);

  Mapper.Free;
end;

procedure TMapperTest.WhenTheFieldIsManyValueAssociationMustLoadTheManyValuePropertyOfTheField;
begin
  var Table := FMapper.LoadClass(TMyEntityWithManyValueAssociation);

  var Field := Table.Field['ManyValueAssociationList'];

  Assert.IsNotNull(Field.ManyValueAssociation);
end;

procedure TMapperTest.WhenTheFieldIsMappedMustLoadTheReferenceToTheTableOfTheField;
begin
  var Table := FMapper.LoadClass(TMyEntity);

  Assert.AreEqual(Table, Table.Fields[0].Table);
end;

procedure TMapperTest.WhenTheFieldIsntAutoGeneratedTheDefaultConstraintMustBeNil;
begin
  var Table := FMapper.LoadClass(TAutoGeneratedClass);

  Assert.IsNull(Table.Field['Value'].DefaultConstraint);
end;

procedure TMapperTest.WhenTheFieldIsOfDateTimeTypeMustLoadTheSpecialTypeWithDateTime;
begin
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);

  Assert.AreEqual(stDateTime, Table.Field['DateTime'].SpecialType);
end;

procedure TMapperTest.WhenTheFieldIsOfDateTypeMustLoadTheSpecialTypeWithDate;
begin
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);

  Assert.AreEqual(stDate, Table.Field['Date'].SpecialType);
end;

procedure TMapperTest.WhenTheFieldIsOfTimeTypeMustLoadTheSpecialTypeWithTime;
begin
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);

  Assert.AreEqual(stTime, Table.Field['Time'].SpecialType);
end;

procedure TMapperTest.WhenTheFieldIsRequiredMustLoadThisInfoInTheField;
begin
  var Table := FMapper.LoadClass(TRequiredClass);

  var Field := Table.Field['RequiredField'];

  Assert.IsTrue(Field.Required);
end;

procedure TMapperTest.WhenTheFieldsAreLoadedMustFillTheNameWithTheNameOfPropertyOfTheClass;
begin
  var Table := FMapper.LoadClass(TMyEntity3);

  Assert.AreEqual('Id', Table.Fields[0].DatabaseName);
end;

procedure TMapperTest.WhenTheFieldValueIsNullMustLoadTheFieldWithTheEmptyValue;
begin
  var MyClass := TMyEntityWithAllTypeOfFields.Create;
  MyClass.Enumerator := Enum3;

  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);

  var Field := Table.Field['Enumerator'];

  Field.SetValue(MyClass, NULL);

  Assert.AreEqual(Enum1, Field.GetValue(MyClass).AsType<TMyEnumerator>);

  MyClass.Free;
end;

procedure TMapperTest.WhenTheForeignKeyIsAClassAliasMustLoadTheForeignClassAndLinkToForeignKey;
begin
  var Table := FMapper.LoadClass(TMyEntityWithForeignKeyAlias);

  Assert.AreEqual<Integer>(1, Length(Table.ForeignKeys));
end;

procedure TMapperTest.WhenTheForeignKeyIsCreatesMustLoadTheParentTable;
begin
  var Table := FMapper.LoadClass(TMyEntityWithFieldNameAttribute);

  Assert.IsNotNull(Table.ForeignKeys[0].ParentTable);
end;

procedure TMapperTest.WhenTheForeignKeyTableHasAFloatKeyMustLoadThePrecisionAndSizeFromThePrimaryKey;
begin
  var Table := FMapper.LoadClass(TForeignKeyClassToSpecialCase);

  Assert.AreEqual(20, Table.Field['FloatForeignKey'].Size);
  Assert.AreEqual(5, Table.Field['FloatForeignKey'].Scale);
end;

procedure TMapperTest.WhenTheLazyFieldIsntLoadedAndHaveAKeyFilledMustReturnTheKeyValueInGetValueFunction;
begin
  var MyClass := TLazyClass.Create;
  TLazyManipulator.GetManipulator(MyClass.Lazy).Loader := FLazyLoader.Instance;
  var Table := FMapper.LoadClass(MyClass.ClassType);

  Assert.AreEqual(1234, Table.Field['Lazy'].GetValue(MyClass).AsInteger);

  MyClass.Free;
end;

procedure TMapperTest.WhenTheLazyPropertyIsLoadedMustReturnTheInternalValue;
begin
  var MyClass := TLazyClass.Create;
  var TheClass := TMyEntity.Create;

  MyClass.Lazy.Value := TheClass;

  var Table := FMapper.LoadClass(TLazyClass);
  var Field := Table.Fields[1];

  Assert.AreEqual<TObject>(TheClass, Field.GetValue(MyClass).AsObject);

  MyClass.Free;

  TheClass.Free;
end;

procedure TMapperTest.WhenTheLinkBetweenTheManyValueAssociationAndTheChildTableForeignKeyDontExistsMustRaiseAnError;
begin
  Assert.WillRaise(
    procedure
    begin
      FMapper.LoadClass(TManyValueAssociationParentNoLink);
    end, EManyValueAssociationLinkError);
end;

procedure TMapperTest.WhenTheNullablePropertyIsFilledWithAValueMustLoadTheValue;
begin
  var MyClass := TClassWithNullableProperty.Create;
  var Table := FMapper.LoadClass(MyClass.ClassType);

  var Field := Table.Fields[1];

  Field.SetValue(MyClass, 123456);

  Assert.AreEqual<Integer>(123456, MyClass.Nullable.Value);

  MyClass.Free;
end;

procedure TMapperTest.WhenTheNullablePropertyIsFilledWithTheNullValueMustMarkAsNullTheValue;
begin
  var MyClass := TClassWithNullableProperty.Create;
  var Table := FMapper.LoadClass(MyClass.ClassType);

  var Field := Table.Fields[1];

  Field.SetValue(MyClass, Null);

  Assert.IsTrue(MyClass.Nullable.IsNull);

  MyClass.Free;
end;

procedure TMapperTest.WhenTheNullablePropertyIsLoadedMustReturnTheFilled;
begin
  var MyClass := TClassWithNullableProperty.Create;
  MyClass.Nullable := 123456;
  var Table := FMapper.LoadClass(MyClass.ClassType);

  var Field := Table.Fields[1];

  Assert.AreEqual(123456, Field.GetValue(MyClass).AsInteger);

  MyClass.Free;
end;

procedure TMapperTest.WhenThePropertyIsANativeTypeMustMarkTheFieldAsRequired(const FieldName: String);
begin
  var Table := FMapper.LoadClass(TMyEntityWithAllTypeOfFields);

  Assert.IsTrue(Table.Field[FieldName].Required, FieldName);
end;

procedure TMapperTest.WhenThePropertyIsLazyMustCreateTheForeignKeyToThisProperty;
begin
  var Table := FMapper.LoadClass(TLazyClass);

  Assert.AreEqual<Integer>(1, Length(Table.ForeignKeys));
end;

procedure TMapperTest.WhenThePropertyIsLazyMustFillWithTrueTheIsLazyPropertyInTheField;
begin
  var Table := FMapper.LoadClass(TLazyClass);

  Assert.IsTrue(Table.Fields[1].IsLazy);
end;

procedure TMapperTest.WhenThePropertyIsNullableMustMarkTheFieldAsNotRequired;
begin
  var Table := FMapper.LoadClass(TClassWithNullableProperty);

  Assert.IsFalse(Table.Fields[1].Required);
end;

procedure TMapperTest.WhenTheTableHasAPrimaryKeyMustCreateAnIndexForThePrimaryKey;
begin
  var Table := FMapper.LoadClass(TClassWithPrimaryKey);

  Assert.AreEqual<NativeInt>(1, Length(Table.Indexes));
end;

procedure TMapperTest.WhenTheTableIsInheritedMustLoadAllManyValueAssociationOfTheClass;
begin
  Assert.AreEqual<NativeInt>(1, Length(FMapper.LoadClass(TManyValueClassInherited).ManyValueAssociations));
end;

procedure TMapperTest.WhenTryToFindATableMustReturnTheTableOfTheClass;
begin
  var Table := FMapper.LoadClass(TMyEntity3);

  Assert.AreEqual(TMyEntity3, Table.ClassTypeInfo.MetaclassType);
end;

procedure TMapperTest.WhenUseTheUniqueIndexAttributeMustMarkTheIndexAsUnique;
begin
  var Table := FMapper.LoadClass(TMyClassWithIndex);

  Assert.IsTrue(Table.Indexes[3].Unique);
end;

end.

